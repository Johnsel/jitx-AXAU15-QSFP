; Generated by JITX 3.2.0
#use-added-syntax(jitx)
defpackage main :
  import jitx
  import core
  import jitx/commands
  import ocdb/utils/generic-components
  import helpers
  import ocdb/utils/bundles
  import ocdb/utils/symbols
  import ocdb/modules/passive-circuits
  import ocdb/utils/design-vars

MIN-CAP-VOLTAGE = 10.0

; Define the shape/size of the board
val board-shape = RoundedRectangle(30.0, 18.5, 0.25)


defn add-boost-cap (pin1:JITXObject pin2:JITXObject params:Tuple<KeyValue>) :
  inside pcb-module:
    val cap = cap-strap(pin1 pin2 params)
    short-trace(cap.p[1] pin1)
    short-trace(cap.p[2] pin2)
    cap


pcb-module ETA1471FT2G-psu (input-voltage:Toleranced = 12.0 +/- (10 %) , output-voltage:Toleranced = 3.30 +/- (10 %) ):
  port vin : power
  port vout : power

  inst smps : ETA1471FT2G/components/UNKNOWN/ETA1471/ETA1471

  inst ind : smd-inductor(4.7e-6, 0.05) ; this needs to be whatever the manufacturer suggests for this
  net (vin.gnd vout.gnd smps.gnd)

  net (vin.vdd smps.vin smps.en)
  net (smps.sw  ind.p[1])
  net (vout.vdd ind.p[2])

  ; add-boost-cap(smps.sw smps.bst ["capacitance" => 22.0e-9 +/- (10%)])
  ; add-boost-cap(smps.sw smps.bst ["capacitance" => 22.0e-9 +/- (10%) "tolerance" => +/- (10%)]) ; these values should be whatever the manufacturer suggests for this
  ; add-boost-cap(smps.sw smps.bst ["capacitance" => 22.0e-9 +/- (10%) "tolerance" => (10%)]) ; these values should be whatever the manufacturer suggests for this
  add-boost-cap(smps.sw smps.bst ["capacitance" => 22.0e-9 "tolerance" => 0.10 ]) ; these values should be whatever the manufacturer suggests for this
  bypass-cap-strap(smps.vin, smps.gnd, 22.0e-6)
  bypass-cap-strap(ind.p[1], smps.gnd, 22.0e-6)
  ;if output-voltage < 3.3:
  ;  cap-strap(ind.p[1], gnd, 22.0e-6)

  inst output-voltage-divider : voltage-divider(source-voltage   = output-voltage, 
                                                divider-output   = 0.8 +/- (15 %) 
                                                current          = 5.0e-4 )
  net (output-voltage-divider.in ind.p[2])
  net (output-voltage-divider.out smps.fb)
  net (output-voltage-divider.lo smps.gnd)

; Module to run as a design
pcb-module my-design :
  ; define some pins/ports
  port vin : power
  port vout : power

  inst smps : ETA1471FT2G-psu()
  net (vin smps.vin) ; bundle connection
  net (vout smps.vout) ; bundle connection
  net GND (vin.gnd vout.gnd) ; let's tie our grounds together
  net VIN (vin.vdd) ; create named nets for documentation purposes
  net VOUT (vout.vdd)
  ; add a ground plane
  geom(GND) :
    copper-pour(LayerIndex(1), isolate = 0.1, rank = 1, orphans = true) = Rectangle(width(board-shape) - 1.0, height(board-shape) - 1.0)

  ; add a net class for power nets
  val power-net-class = NetClass(`Power, [`min-trace => 0.381])
  property(GND.net-class) = power-net-class
  property(VOUT.net-class) = power-net-class
  property(VIN.net-class) = power-net-class

  ; add some symbols
  symbol(GND) = ground-sym
  symbol(VIN) = supply-sym
  symbol(VOUT) = supply-sym

  ; Write the board version on silkscreen
  inst version-label  : ocdb/artwork/board-text/version-silkscreen("Version 0.0")
  place(version-label) at loc(0.0, height(board-shape) / 2.0 - 1.0) on Bottom

; Set the design name     - a directory with this name will be generated under the "designs" directory
;     the board           - a Board object
;     [optional] rules    - the PCB design rules (if not givn default rules will be used)
;     [optional] vendors  - Strings or AuthorizedVendors (if not give default vendors will be used)
;     [optional] quantity - Minimum stock quantity the vendor should carry (if not give default quantity will be used)
setup-design(
  "jitx-design",
  ocdb/utils/defaults/default-board(ocdb/manufacturers/stackups/jlcpcb-jlc2313, board-shape)
)

; Set the schematic sheet size
set-paper(ANSI-A)

; Set the top level module (the module to be compile into a schematic and PCB)
set-main-module(my-design)

; Use any helper function from helpers.stanza here
; run-check-on-design(my-design)

; View the results
view-board()
view-schematic()
view-design-explorer()
view-bom(BOM-STD)
